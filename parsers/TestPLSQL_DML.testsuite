/**
 * Oracle(c) PL/SQL 11g Parser  
 *
 * Copyright (c) 2009-2011 Alexandre Porcelli <alexandre.porcelli@gmail.com>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

gunit PLSQL;

@header { package br.com.porcelli.parser.plsql; }

group_by_clause:
"group by country_name,prod_name,calendar_year" OK

select_statement:
join01.sql OK
join02.sql OK
join03.sql OK
join04.sql OK
join05.sql OK
join06.sql OK
join07.sql OK
join08.sql OK
join09.sql OK
join10.sql OK
join11.sql OK
join12.sql OK
join13.sql OK
join14.sql OK
join15.sql OK
join16.sql OK
join17.sql OK
join18.sql OK
join19.sql OK
join20.sql OK
join21.sql OK
interval01.sql OK
interval02.sql OK
interval03.sql OK
interval04.sql OK
datetime01.sql OK
datetime02.sql OK
datetime03.sql OK
datetime04.sql OK
datetime05.sql OK
query_factoring01.sql OK
query_factoring02.sql OK
query_factoring03.sql OK
query_factoring04.sql OK
query_factoring05.sql OK
query_factoring06.sql OK
query_factoring07.sql OK
query_factoring08.sql OK
query_factoring09.sql OK
query_factoring10.sql OK
query_factoring11.sql OK
condition01.sql OK
condition02.sql OK
condition03.sql OK
condition04.sql OK
condition05.sql OK
condition06.sql OK
condition07.sql OK
condition08.sql OK
condition09.sql OK
condition10.sql OK
condition11.sql OK
condition12.sql OK
condition14.sql OK
condition15.sql OK
condition16.sql OK
like01.sql OK
for_update01.sql OK
for_update02.sql OK
for_update03.sql OK
for_update04.sql OK
for_update05.sql OK
for_update06.sql OK
for_update07.sql OK
for_update08.sql OK
string01.sql OK
analytic_query02.sql OK
analytic_query03.sql OK
analytic_query04.sql OK
analytic_query05.sql OK
analytic_query06.sql OK
cast_multiset01.sql OK
cast_multiset02.sql OK
cast_multiset03.sql OK
cast_multiset04.sql OK
cast_multiset05.sql OK
cast_multiset06.sql OK
cast_multiset07.sql OK
lexer01.sql OK
lexer02.sql OK
lexer03.sql OK
lexer04.sql OK
lexer05.sql OK
columns01.sql OK
//bindvar01.sql OK insert
bindvar02.sql OK
bindvar03.sql OK
model_clause01.sql OK
model_clause02.sql OK
union01.sql OK
union02.sql OK
union03.sql OK
union04.sql OK
union05.sql OK
union06.sql OK
//union07.sql OK
union08.sql OK
//union09.sql OK
connect_by01.sql OK
connect_by02.sql OK
connect_by03.sql OK
connect_by04.sql OK
connect_by05.sql OK
groupby01.sql OK
groupby02.sql OK
groupby03.sql OK
groupby04.sql OK
groupby05.sql OK
order_by01.sql OK
order_by02.sql OK
order_by03.sql OK
order_by04.sql OK
order_by05.sql OK
dblink01.sql OK
function01.sql OK
function02.sql OK
function03.sql OK
function04.sql OK
function05.sql OK
function06.sql OK
pivot01.sql OK
pivot02.sql OK
pivot03.sql OK
//pivot04.sql OK fails ATM
comment01.sql OK
simple02.sql OK
simple03.sql OK
//simple04.sql OK fails ATM
//simple05.sql OK fails ATM
simple06.sql OK
simple07.sql OK
simple08.sql OK
simple09.sql OK
simple10.sql OK
simple11.sql OK
simple12.sql OK
simple13.sql OK
//object_access01.sql OK fails ATM
sample01.sql OK
numbers01.sql OK
flashback01.sql OK

"select * from tablex, tabley" OK
<<with
   dept_costs as ( 
      select department_name, salary dept_total 
         from employees e, departments d 
         where e.department_id = d.department_id 
      group by department_name), 
   avg_cost as ( 
      select dept_total avg 
      from dept_costs) 
select * from dept_costs 
   where dept_total = 10>>  OK
<<select a.b().c('a').getData(getData(1, 22)).xxx
   from employees 
   where department_id = 30 
   order by last_name>> OK
<<select * 
   from employees 
   where department_id = 30 
   order by last_name>> OK
<<select last_name, job_id, salary, department_id 
   from employees 
   where job_id = 'pu_clerk' 
   order by last_name>>  OK
<<select a.department_id 'department', 
   a.num_emp '%_employees', 
   a.sal_sum '%_salary' 
from
(select department_id, num_emp, employees.* 
   from employees 
   group by department_id) a, 
(select total_count 
   from employees) b 
order by a.department_id>>  OK
<<select * from sales partition (sales_q2_2000) s 
   where s.amount_sold = 1500 
   order by cust_id, time_id, channel_id>>  OK
<<select channel_desc, calendar_month_desc, co.country_id, sales
   from sales, customers, times, channels, countries co 
   where sales.time_id=times.time_id 
  group by grouping sets( 
      (channel_desc, calendar_month_desc, co.country_id), 
      (channel_desc, co.country_id), 
      (calendar_month_desc, co.country_id) )>>  OK
<<select last_name, employee_id, manager_id from employees 
   connect by employee_id = manager_id 
   order by last_name >> OK
<<select department_id, salary, salary 
   from employees 
   group by department_id 
   having salary = 5000 
   order by department_id>> OK
<<select department_id, manager_id 
   from employees 
   group by department_id, manager_id 
   having  department_id = 1
   order by department_id>> OK
<<select * 
   from employees 
   where job_id = 'pu_clerk' 
   order by salary desc>> OK
<<select last_name, department_id, salary 
   from employees 
   order by department_id asc, salary desc, last_name>>  OK
<<select last_name, department_id, salary 
   from employees 
   order by 2 asc, 3 desc, 1>> OK
<<select country_name country, 
         prod_name prod, 
         calendar_year year, 
         amount_sold sale, 
         amount_sold cnt 
    from sales,times,customers,countries,products 
    where sales.time_id = times.time_id
    group by country_name,prod_name,calendar_year>> OK
<<select country,prod,year,s 
  from sales_view_ref 
  model 
    partition by (country)
    dimension by (prod, year) 
    measures (sale s) 
    ignore nav 
    unique dimension 
    rules upsert sequential order 
    (
      s[prod='mouse pad'] = 1, 
      s['standard mouse'] = 2 
    ) 
  order by country, prod, year>>  OK
<<select country, year, sale, csum 
   from 
   (select country, year, salex sale 
    from sales_view_ref 
    group by country, year 
   ) 
   model dimension by (country, year) 
         measures (sale, 0 csum) 
         rules 
            (
              s['standard mouse'] = 2 
            )
   order by country, year>>  OK
<<select e.employee_id, e.salary, e.commission_pct 
   from employees e, departments d 
   where job_id = 'sa_rep' 
   for update 
   order by e.employee_id>>  OK
<<select e.employee_id, e.salary, e.commission_pct 
   from employees e join departments d 
   using (department_id) 
   where job_id = 'sa_rep'
   for update of e.salary 
   order by e.employee_id>>  OK
<<select * from tablexx 
pivot 
(xxx(order_total) for order_mode in ('direct' as store, 'online' as internet))>>  OK
<<select * from 
(select year, order_mode, order_total from orders) 
pivot 
(yyy(order_total) for order_mode in ('direct' as store, 'online' as internet))>>  OK
<<select * from pivot_table 
  unpivot (yearly_total for order_mode in (store as 'direct', internet as 'online')) 
  order by year, order_mode>>  OK
<<select * from pivot_table 
  unpivot include nulls 
    (yearly_total for order_mode in (store as 'direct', internet as 'online')) 
  order by year, order_mode>>  OK
<<select last_name, job_id, departments.department_id, department_name 
   from employees, departments 
   where employees.department_id = departments.department_id 
   order by last_name, job_id>>  OK
<<select last_name, job_id, departments.department_id, department_name 
   from employees, departments 
   where employees.department_id = departments.department_id  
   order by last_name>> OK
<<select last_name, department_id from employees 
   where department_id = 
     (select department_id from employees 
      where last_name = 'lorentz') 
   order by last_name, department_id>>  OK
<<select e1.last_name||' works for '||e2.last_name 
   'employees and their managers'
   from employees e1, employees e2 
   where e1.manager_id = e2.employee_id  
   order by e1.last_name>>  OK
<<select d.department_id, e.last_name 
   from departments d left outer join employees e 
   on d.department_id = e.department_id 
   order by d.department_id, e.last_name>>  OK
<<select d.department_id, e.last_name 
   from departments d right outer join employees e 
   on d.department_id = e.department_id 
   order by d.department_id, e.last_name>>  OK
<<select d.department_id as d_dept_id, e.department_id as e_dept_id, 
      e.last_name 
   from departments d full outer join employees e
     on d.department_id = e.department_id 
   order by d.department_id, e.last_name>>  OK
<<select department_id as d_e_dept_id, e.last_name 
   from departments d full outer join employees e 
   using (department_id) 
   order by department_id, e.last_name>>  OK
<<select times.time_id, product, quantity from inventory 
   partition by  (product) 
   right outer join times on (times.time_id = inventory.time_id) 
   where times.time_id = 1 
   order by  2,1>> OK
<<select time_id, product, quantity 
   from ( select times.time_id, product, quantity 
             from inventory partition by  (product) 
                right outer join times on (times.time_id = inventory.time_id) 
   where times.time_id = 1) 
   order by  2,1>> OK
<<select t1.department_id, t2.* from hr_info t1, table(t1.people) t2 
   where t2.department_id = t1.department_id>>  OK
<<select last_name org_chart, employee_id, manager_id, job_id 
    from employees 
    start with job_id = 'ad_vp' 
    connect by prior employee_id = manager_id>> OK
<<select last_name, department_name 
   from employees@remote, departments 
   where employees.department_id = departments.department_id>>  OK
"select sysdate from dual" OK
"select employees_seq.currval from dual" OK

table_ref:
"tablex" OK
<<departments d left outer join employees e 
   on d.department_id = e.department_id>>  OK
<<departments d right outer join employees e 
   on d.department_id = e.department_id>> OK
<<departments d full outer join employees e 
   using (department_id)>>  OK
<<inventory 
   partition by  (product) 
   right outer join times on (times.time_id = inventory.time_id)>> OK

table_ref_list:
"hr_info t1, table(t1.people) t2 " OK
   
dml_table_expression_clause:
"tablex" OK

table_ref_aux:
"only ( tablex ) " OK
"sales partition (sales_q2_2000)" OK
"orders sample (10)" OK
"orders sample(10) seed (1)" OK
"employees as of timestamp systimestamp" OK //TODO fix it
<<employees 
  versions between timestamp 
    systimestamp and systimestamp2>> OK
"employees e"  OK
"employees as e"  OK
<<employees 
  versions between timestamp 
    systimestamp and systimestamp2 as e>> OK
<<employees 
  versions between timestamp 
    systimestamp and systimestamp2 e>> OK


tableview_name:
"tablex" OK


select_statement:
"select*from table_1" OK
"select * from table_1, table2 where table_1.column1=table_2.column2" OK
"select*from table_1 natural inner join table_2" OK
"select*from table_1 inner join table_2 on table_1.column1=table_2.column2" OK
"select*from table_1 left join table_2 on table_1.column1=table_2.column2" OK
"select*from table_1 left outer join table_2 on table_1.column1=table_2.column2" OK
"select*from table_1 full outer join table_2 on table_1.column1=table_2.column2" OK
"select*from table_1 right join table_2 using (id1,id2)" OK

"select*from table_1 union select*from table_2" OK
"select*from table_1 union all select*from table_2"  OK
"select a,b,c from table_1 minus select e,f,g from table_2" OK
<<select a,b,c from table_1
 union all
select e,f,g from table_2
 intersect 
select*from table_3
 union 
select*from table_4>>
    OK
"select a,b into :VarA,:FrmA_FieldB,:cc_ from table_1" OK

"select A from (select B from (select C from d) cross join table_b b)" OK
"select 0 from (select B from (select * from C) cross join table_b as b)" OK

"select * from a where a<> :Var1" OK
"select * from a where a<> : 11" OK
<<select * from a where a<> :"11">> OK
"select * from b where a<=:frmF1_clsC1_dfDF1_instI1 --EXF4" OK
"select*from c where a>aa" OK

insert_statement:
"insert into departments 
   values (280, 'recreation', 121, 1700)"  OK
<<insert into employees (employee_id, last_name, email, 
      hire_date, job_id, salary, commission_pct) 
   values (207, 'gregory', 'pgregory@example.com', 
      sysdate, 'pu_clerk', 1.2e3, null)>>  OK
<<insert into 
   (select employee_id.* from employees) 
   values (207, 'gregory', 'pgregory@example.com', 
      sysdate, 'pu_clerk', 1.2e3, null)>>  OK
<<insert into bonuses 
   select employee_id.* from employees>>  OK
<<insert into raises 
   select salary.* from employees 
   where commission_pct > .2 
   log errors into errlog ('my_bad') reject limit 10>>  OK
<<insert into employees@remote 
   values (8002, 'juan', 'fernandez', 'juanf@hr.example.com', null, 
   to_date('04-oct-1992', 'dd-mon-yyyy'), 'sh_clerk', 3000, 
   null, 121, 20)>>  OK
<<insert into departments 
   values  (departments_seq.nextval, 'entertainment', 162, 1400)>>  OK
<<insert into employees 
      (employee_id, last_name, email, hire_date, job_id, salary)
   values 
   (employees_seq, 'doe', 'john.doe@example.com', 
       sysdate, 'sh_clerk', 2400) 
   returning salary, job_id into :bnd1, :bnd2>>  OK
<<insert into books values ( 
   'an autobiography', person_t('bob', 1234))>>  OK
<<insert into lob_tab 
   select salary.* from employees>>  OK
<<insert all 
      into sales (prod_id, cust_id, time_id, amount) 
      values (product_id, customer_id, weekly_start_date, sales_sun) 
      into sales (prod_id, cust_id, time_id, amount) 
      values (product_id, customer_id, weekly_start_date, sales_mon) 
      into sales (prod_id, cust_id, time_id, amount) 
      values (product_id, customer_id, weekly_start_date, sales_tue) 
      into sales (prod_id, cust_id, time_id, amount) 
      values (product_id, customer_id, weekly_start_date, sales_wed) 
      into sales (prod_id, cust_id, time_id, amount) 
      values (product_id, customer_id, weekly_start_date, sales_thu)
     into sales (prod_id, cust_id, time_id, amount) 
      values (product_id, customer_id, weekly_start_date, sales_fri) 
      into sales (prod_id, cust_id, time_id, amount) 
      values (product_id, customer_id, weekly_start_date, sales_sat) 
   select sales_input_table.* 
      from sales_input_table>>  OK
<<insert all 
   when order_total < 1000000 then 
      into small_orders 
   when order_total < 2000000 then 
      into medium_orders 
   when order_total > 2000000 then 
      into large_orders 
   select orders.* from orders>>  OK
<<insert all 
   when order_total < 100000 then 
      into small_orders 
   when order_total < 200000 then 
      into medium_orders 
   else 
      into large_orders 
   select orders.* from orders>>  OK
<<insert all 
   when ottl < 100000 then 
      into small_orders 
         values(oid, ottl, sid, cid) 
   when ottl > 100000 and ottl < 200000 then 
      into medium_orders 
         values(oid, ottl, sid, cid) 
   when ottl > 200000 then 
      into large_orders 
         values(oid, ottl, sid, cid) 
   when ottl > 290000 then 
      into special_orders 
   select o.* from orders o>>  OK
<<insert all 
   when ottl < 100000 then 
      into small_orders 
         values(oid, ottl, sid, cid) 
   when ottl > 100000 and ottl < 200000 then 
      into medium_orders 
         values(oid, ottl, sid, cid) 
   when ottl > 200000 then 
      into large_orders 
         values(oid, ottl, sid, cid) 
   when ottl > 290000 then 
      into special_orders 
   when ottl > 200000 then 
      into large_orders 
         values(oid, ottl, sid, cid) 
   select o.* from orders o>>  OK

delete_statement:
<<delete from product_descriptions 
   where language_id = 'ar'>>  OK
<<delete from employees 
   where job_id = 'sa_rep' 
   and commission_pct < .2>>  OK
<<delete from (select employees.* from employees) 
   where job_id = 'sa_rep' 
   and commission_pct < .2>>  OK
<<delete from hr.locations@remote 
   where location_id > 3000>>  OK
<<delete from sales partition (sales_q1_1998) 
   where amount_sold > 1000>>  OK
<<delete from employees
   where job_id = 'sa_rep'
   and hire_date < 10
   returning salary into :bnd1>>  OK

update_statement:
<<update employees 
   set commission_pct = null 
   where job_id = 'sh_clerk'>>  OK
<<update employees set 
    job_id = 'sa_man', salary = 1000, department_id = 120 
    where first_name = 'douglas grant'>>  OK
<<update employees@remote
   set salary = 1.1
   where last_name = 'baer'>>  OK
<<update employees a 
    set department_id = 
        (select departments.*
            from departments 
            where location_id = '2100'), 
        (salary, commission_pct) = 
        (select departments.*
            from departments 
            where location_id = '2100') 
    where department_id > 1>>  OK
<<update sales partition (sales_q1_1999) s 
   set s.promo_id = 494 
   where amount_sold > 1000>>  OK
<<update people_demo1 p set value(p) = 
   (select departments.* from departments) 
   where p.department_id = 10>>  OK
<<update employees 
  set job_id ='sa_man', salary = 1000, department_id = 140 
  where last_name = 'jones'
  returning salary, last_name, department_id into :bnd1, :bnd2, :bnd3>>  OK
<<update employees 
   set salary = 1.1 
   where department_id = 100 
   returning salary into :bnd1>>  OK

merge_statement:
merge01.sql OK
merge02.sql OK
merge03.sql OK

lock_table_statement:
<<lock table employees 
   in exclusive mode 
   nowait>>  OK
<<lock table employees 
   in exclusive mode 
   wait 10>>  OK
<<lock table employees 
   in share update mode 
   wait 10>>  OK
<<lock table employees 
   in share mode 
   wait 10>>  OK
<<lock table employees 
   in row share mode 
   wait 10>>  OK
<<lock table a.employees 
   in row share mode 
   wait 10>>  OK
<<lock table a.employees@teste partition for (1, 2)
   in row share mode 
   wait 10>> OK
<<lock table a.employees@teste partition (1)
   in row share mode 
   wait 10>> OK
<<lock table a.employees@teste subpartition for (1, 2)
   in row share mode 
   wait 10>> OK
<<lock table a.employees@teste subpartition (1)
   in row share mode 
   wait 10>> OK

expression:
"c1%notfound" OK
":c1%found" OK
"sql%rowcount" OK
"c1%rowcount" OK
"c2%isopen" OK
